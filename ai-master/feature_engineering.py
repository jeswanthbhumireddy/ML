# -*- coding: utf-8 -*-
"""Feature_Engineering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WqTBd0Jl05CkvP7-2Hp7ePm9MMc-5L1x

## Import the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Read the dataset"""

dataset = pd.read_csv('https://raw.githubusercontent.com/futurexskill/ai/master/retailstore.csv')

"""## Get Info"""

dataset.info()

"""## Print records"""

dataset

"""## Separate the Independent and Dependent variables"""

X = dataset.iloc[:, :-1].values
X

y = dataset.iloc[0:,-1].values
y

"""## Replacing the missing values

### Imputer class
"""

from sklearn.preprocessing import Imputer

imputer = Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)

imputer = imputer.fit(X[:, 0:2])

X[:, 0:2] = imputer.transform(X[:, 0:2])

X

dataset.describe()

"""## Encoding the Independent variables

### Label Encoder
"""

from sklearn.preprocessing import LabelEncoder 
labelencoder_X = LabelEncoder()

"""Convert Age to Numerical value"""

X[:, 2] = labelencoder_X.fit_transform(X[:, 2])

X

"""Convert Country to Numeric Value"""

X[:, 3] = labelencoder_X.fit_transform(X[:, 3])

X

"""### One Hot Encoder"""

from sklearn.preprocessing import OneHotEncoder

onehotencoder = OneHotEncoder(categorical_features = [3])

X = onehotencoder.fit_transform(X).toarray()

X

"""Remove the First Column"""

X = X[:,1:]

X

"""## Encoding the dependent value"""

labelencoder_y = LabelEncoder()

y = labelencoder_X.fit_transform(X[:, 0])

y

"""## Split the Training and Test Data"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =.20,random_state=100)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## Build a Classification Model"""

from sklearn.neighbors import KNeighborsClassifier
# minkowski is for ecledian distance
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)

"""## Evaluate the Model"""

y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score

cm = confusion_matrix(y_test, y_pred)
cm

accuracy_score(y_test,y_pred)



