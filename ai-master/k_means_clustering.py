# -*- coding: utf-8 -*-
"""K_Means_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18CL-4UP76zIG733yUT0z8mjw9gN2O95b

## Import the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Read the dataset"""

dataset = pd.read_csv('https://raw.githubusercontent.com/futurexskill/ai/master/ageincome.csv')

"""## Read the features

All values are features. There is no dependent variable in unsupoervised learning
"""

X = dataset.iloc[:, :].values
X

"""## Import KMeans from Scikit-learn libraries"""

from sklearn.cluster import KMeans

"""## Create an empty List to store WCSS values"""

wcss = []

"""## For number of cluster 1 to 10 calculate WCSS value

n_clusters : int, optional, default: 8
The number of clusters to form as well as the number of centroids to generate.


init : {‘k-means++’, ‘random’ or an ndarray}
Method for initialization, defaults to ‘k-means++’:


max_iter : int, default: 300
Maximum number of iterations of the k-means algorithm for a single run.


n_init : int, default: 10
Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.
"""

for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++',max_iter=300,n_init=10 ,random_state = 42)
    # feed the data
    kmeans.fit(X)
    # kmeans.inertia_ gives the wcss
    wcss.append(kmeans.inertia_)

wcss

"""## Plot WCSS and number of clusters"""

plt.plot(range(1, 11), wcss)
plt.title('Deriving optimal number of clusters')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

"""## Create KMeans class with 3 clusters"""

kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 42)

"""## Predict Cluster value for each data point

0 - Cluster 1

1 - Cluster 2

2 - Cluster 3
"""

y_kmeans = kmeans.fit_predict(X)
y_kmeans

"""## Assign color to each cluster and plot"""

plt.xlabel('Age')
plt.ylabel('Salary')
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'orange')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'black')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green')

