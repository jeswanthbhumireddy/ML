# -*- coding: utf-8 -*-
"""simple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WZkNlPUDGdX34QXvAP7ae3NIxWBMYMar

## Import the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Read the dataset"""

dataset = pd.read_csv('https://raw.githubusercontent.com/futurexskill/ai/master/studentmarks.csv')

"""## Check sample records"""

dataset.head()

"""## Get  dataset info"""

dataset.info()

dataset.describe()

"""## Separate out the independent and dependent variables

X - Independent Variable or Hours
"""

X = dataset.iloc[:, :-1].values
X

"""y - Dependent Variable or Mark"""

y = dataset.iloc[:, 1].values
y

"""## Exploratory Data Analysis using MatplotLib"""

plt.xlabel('Hours studied')
plt.ylabel('Mark scored')
plt.title('Student Mark Analysis')
plt.scatter(X, y)

"""## Split the Training and Test Data"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2,random_state=0)

"""## Build a Linear Regression model"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()

"""Train the model. This step is Machine Learning.  Machine is learning from training data"""

regressor.fit(X_train, y_train)

"""## Evaluate the model

LinearRegression class has a score method which gives **R Squared** value
"""

rsquared = regressor.score(X_test, y_test)
rsquared

"""Accuracy is pretty high for tis model as R Sqaured is close to 1

## Extract the Linear Regression formula 

### Y = a + b X

Get the constant or intercept  value of the line
"""

intercept = regressor.intercept_
intercept

"""Get the slope or coefficient of the line"""

coefficient = regressor.coef_
coefficient

"""### Y = a + b X

### Mark = 0.531  + 9.93 Hours

## Predict for the test set
"""

y_pred = regressor.predict(X_test)
y_pred

"""Compare with actual data"""

y_test

"""## Plot the Actual Vs Predicted value"""

plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_test, y_pred, color = 'blue')
plt.title('Mark vs Study Hours (test set)')
plt.xlabel('Study Hours')
plt.ylabel('Mark')
plt.show()

"""## Predict for new data points

Predict using the predict method
"""

y_new_pred2 = regressor.predict([[3]])
print(y_new_pred2)

"""Predict using the formula"""

y_new_pred22 = coefficient * 3 + intercept
print(y_new_pred2)

